<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on 八 六</title><link>https://blog.8688886.xyz/post/</link><description>Recent content in Posts on 八 六</description><generator>Hugo -- gohugo.io</generator><language>en-ZH</language><managingEditor>86@example.com (八 六)</managingEditor><webMaster>86@example.com (八 六)</webMaster><lastBuildDate>Fri, 07 Feb 2025 11:43:04 +0000</lastBuildDate><atom:link href="https://blog.8688886.xyz/post/index.xml" rel="self" type="application/rss+xml"/><item><title>人工智能：什么是自然语言处理</title><link>https://blog.8688886.xyz/p/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E4%BB%80%E4%B9%88%E6%98%AF%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86/</link><pubDate>Fri, 07 Feb 2025 11:43:04 +0000</pubDate><author>86@example.com (八 六)</author><guid>https://blog.8688886.xyz/p/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E4%BB%80%E4%B9%88%E6%98%AF%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86/</guid><description>&lt;img src="https://blog.8688886.xyz/p/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E4%BB%80%E4%B9%88%E6%98%AF%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86/image-3.png" alt="Featured image of post 人工智能：什么是自然语言处理" />&lt;p>自然语言处理（NLP）是一门融合了计算机科学、人工智能和语言学的交叉学科，旨在让计算机能够理解、解释和生成人类的自然语言。自然语言是指日常使用的语言，如汉语和英语，它比编程语言更复杂多样。
NLP的&lt;strong>目标是使机器能够像人一样理解和使用语言，以实现更自然高效的人机交互。这包括文本信息提取、自动翻译、情感分析、语音识别和问答系统等应用&lt;/strong>。例如，NLP可以用来开发聊天机器人和翻译软件。
为了实现这些目标，研究人员使用大量数据集和先进算法，如循环神经网络（RNN）、长短时记忆网络（LSTM）和变换器（Transformer）。这些技术的进步显著提升了NLP系统的性能，在许多任务上达到了接近甚至超过人类的水平。&lt;/p>
&lt;p>&lt;img src="https://blog.8688886.xyz/p/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E4%BB%80%E4%B9%88%E6%98%AF%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86/image.png"
width="2418"
height="794"
srcset="https://blog.8688886.xyz/p/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E4%BB%80%E4%B9%88%E6%98%AF%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86/image_hu_de7b7548d53384b9.png 480w, https://blog.8688886.xyz/p/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E4%BB%80%E4%B9%88%E6%98%AF%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86/image_hu_f8bf14b38f556e24.png 1024w"
loading="lazy"
alt="自然语言处理"
class="gallery-image"
data-flex-grow="304"
data-flex-basis="730px"
>&lt;/p>
&lt;blockquote>
&lt;p>一个典型的 NLP 流程大致分为以下几个步骤：&lt;/p>
&lt;ol>
&lt;li>&lt;strong>输入 (Text File)：&lt;/strong> NLP 过程的起始点，通常是文本文件，例如文章、对话、网页等。&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>这是 NLP 系统的原始数据，例如一段文字：“今天天气真好，适合出去玩。”&lt;/li>
&lt;/ul>
&lt;ol>
&lt;li>&lt;strong>预处理 (Preprocessing)：&lt;/strong> 对原始文本进行清洗和规范化，为后续处理做准备。&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>目的&lt;/strong>： 清理和规范化文本，去除噪声，使模型更容易学习。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>常用方法：&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;ul>
&lt;li>&lt;strong>分词 (Tokenization)：&lt;/strong> 将文本分解成独立的词语或子词。例如，将“今天天气真好” 分成 “今天”，“天气”，“真”，“好”。&lt;/li>
&lt;li>&lt;strong>去除停用词 (Stop Word Removal)：&lt;/strong> 去除常用的、没有实际意义的词语，例如“的”，“是”，“了”等。&lt;/li>
&lt;li>&lt;strong>词干提取 (Stemming) / 词形还原 (Lemmatization)：&lt;/strong> 将词语还原为原型，例如将“running” 还原为 “run”。&lt;/li>
&lt;li>&lt;strong>大小写转换 (Lowercasing)：&lt;/strong> 将所有字母转换为小写，避免大小写带来的差异。&lt;/li>
&lt;li>&lt;strong>标点符号去除 (Punctuation Removal)：&lt;/strong> 去除文本中的标点符号。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>例子：&lt;/strong> 经过预处理后，“今天天气真好，适合出去玩。” 可能变为 [&amp;ldquo;今天&amp;rdquo;, &amp;ldquo;天气&amp;rdquo;, &amp;ldquo;真&amp;rdquo;, &amp;ldquo;好&amp;rdquo;, &amp;ldquo;适合&amp;rdquo;, &amp;ldquo;出去玩&amp;rdquo;]。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;ol>
&lt;li>&lt;strong>词嵌入 (Dense Embedding)：&lt;/strong> 将文本转换为计算机可以理解的数值表示形式。&lt;strong>一个分词的词嵌入里有好几百个值&lt;/strong>&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>目的：&lt;/strong> 将词语转换为计算机可以理解的数值向量。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>原理：&lt;/strong> 每个词语都被映射到一个高维空间中的向量，向量之间的距离反映了词语之间的语义相似度。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>常用方法：&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;ul>
&lt;li>&lt;strong>Word2Vec：&lt;/strong> 一种经典的词嵌入方法，通过训练神经网络来学习词向量。&lt;/li>
&lt;li>&lt;strong>GloVe：&lt;/strong> 一种基于词语共现统计的词嵌入方法。&lt;/li>
&lt;li>&lt;strong>FastText：&lt;/strong> 一种改进的词嵌入方法，可以处理未登录词。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>例子：&lt;/strong> “今天” 可能被表示为 [0.1, 0.2, -0.3, 0.5 &amp;hellip;], “天气” 可能被表示为 [0.2, 0.3, -0.1, 0.4 &amp;hellip;]。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>图中 “Dense Embedding” 下面的蓝色圆点就代表了词向量。&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>词嵌入层的作用类似于查字典，将文字转换为计算机可以处理的数字，同时保留了词语的语义信息。&lt;/strong>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;ol>
&lt;li>&lt;strong>深度学习 (Deep Learning)：&lt;/strong> 使用深度神经网络来学习文本的特征和模式。&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>目的：&lt;/strong> 利用神经网络来学习文本的深层特征和模式。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>常用模型：&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;ul>
&lt;li>&lt;strong>循环神经网络 (RNN)：&lt;/strong> 适用于处理序列数据，如文本。&lt;/li>
&lt;li>&lt;strong>长短期记忆网络 (LSTM)：&lt;/strong> 改进的 RNN，可以更好地处理长距离依赖关系。&lt;/li>
&lt;li>&lt;strong>Transformer：&lt;/strong> 基于自注意力机制的模型，在很多 NLP 任务上都取得了SOTA效果。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>图中 “Hidden Layer” 代表了神经网络的隐藏层，它负责学习输入数据的复杂特征。&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>“Output Units” 代表了神经网络的输出层，它根据任务的需求输出不同的结果。&lt;/strong>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;ol>
&lt;li>&lt;strong>输出 (Output)：&lt;/strong> 根据不同的任务，输出相应的结果，例如情感分析、文本分类、实体识别、机器翻译等。&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>目的：&lt;/strong> 根据不同的 NLP 任务，输出相应的结果。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>常见任务：&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;ul>
&lt;li>&lt;strong>情感分析 (Sentiment)：&lt;/strong> 判断文本的情感倾向，例如“积极”、“消极”、“中性”。&lt;/li>
&lt;li>&lt;strong>文本分类 (Classification)：&lt;/strong> 将文本归类到预定义的类别中。&lt;/li>
&lt;li>&lt;strong>实体识别 (Entity Extraction)：&lt;/strong> 识别文本中的命名实体，例如人名、地名、组织机构名。&lt;/li>
&lt;li>&lt;strong>机器翻译 (Translation)：&lt;/strong> 将一种语言的文本翻译成另一种语言。&lt;/li>
&lt;li>&lt;strong>主题建模 (Topic Modeling)：&lt;/strong> 从文本中提取主题。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>&lt;/blockquote>
&lt;p>&lt;strong>词嵌入扩展&lt;/strong>&lt;/p>
&lt;p>处理分词，模型会生成一个包含多个值的向量（或者说一列数值），并根据每个单词与 work 在训练数据中的距离调整这些值。这个向量就是所谓的词嵌入（Word Embedding）。&lt;/p>
&lt;p>&lt;img src="https://blog.8688886.xyz/p/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E4%BB%80%E4%B9%88%E6%98%AF%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86/image-1.png"
width="623"
height="561"
srcset="https://blog.8688886.xyz/p/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E4%BB%80%E4%B9%88%E6%98%AF%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86/image-1_hu_bda9a927600d8d81.png 480w, https://blog.8688886.xyz/p/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E4%BB%80%E4%B9%88%E6%98%AF%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86/image-1_hu_3a7bdb6ec5455a9b.png 1024w"
loading="lazy"
alt="词嵌入-1"
class="gallery-image"
data-flex-grow="111"
data-flex-basis="266px"
>&lt;/p>
&lt;p>词嵌入里有好几百个值，每个值都代表了单词意义的不同方面。就好比我们用类型、位置、卧室数、浴室数和楼层数来描述房子一样，词嵌入里的值描述了单词的语言特性。&lt;/p>
&lt;p>&lt;img src="https://blog.8688886.xyz/p/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E4%BB%80%E4%B9%88%E6%98%AF%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86/image-2.png"
width="1362"
height="195"
srcset="https://blog.8688886.xyz/p/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E4%BB%80%E4%B9%88%E6%98%AF%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86/image-2_hu_8b2e48f1258f5111.png 480w, https://blog.8688886.xyz/p/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E4%BB%80%E4%B9%88%E6%98%AF%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86/image-2_hu_7111fa664ebf6980.png 1024w"
loading="lazy"
alt="词嵌入-2"
class="gallery-image"
data-flex-grow="698"
data-flex-basis="1676px"
>&lt;/p>
&lt;p>由于我们无法准确知道每个值代表什么，有意思的是，我们发现那些意思相近的单词，它们的词嵌入往往很像。比如 &lt;strong>sea&lt;/strong> 和 &lt;strong>ocean&lt;/strong>，虽然它们不能在所有情境下互换，但它们的意思很接近，通过词嵌入，我们能量化这种相似度。&lt;/p>
&lt;p>&lt;img src="https://blog.8688886.xyz/p/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E4%BB%80%E4%B9%88%E6%98%AF%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86/image-3.png"
width="1073"
height="718"
srcset="https://blog.8688886.xyz/p/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E4%BB%80%E4%B9%88%E6%98%AF%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86/image-3_hu_55ba1f912ff1770f.png 480w, https://blog.8688886.xyz/p/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E4%BB%80%E4%B9%88%E6%98%AF%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86/image-3_hu_9b6883ea8beb992a.png 1024w"
loading="lazy"
alt="词嵌入-3"
class="gallery-image"
data-flex-grow="149"
data-flex-basis="358px"
>&lt;/p>
&lt;p>如果我们简化词嵌入，只用两个值来表示，就能更直观地看到单词之间的“距离”或者说相似度了。这样，我们就能发现一些词群，比如 &lt;strong>代词&lt;/strong>群， &lt;strong>交通工具&lt;/strong>群。而能量化单词，正是让模型成功生成文本的第一步。&lt;/p>
&lt;p>&lt;img src="https://blog.8688886.xyz/p/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E4%BB%80%E4%B9%88%E6%98%AF%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86/image-4.png"
width="1280"
height="1672"
srcset="https://blog.8688886.xyz/p/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E4%BB%80%E4%B9%88%E6%98%AF%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86/image-4_hu_e73b082821830dd2.png 480w, https://blog.8688886.xyz/p/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E4%BB%80%E4%B9%88%E6%98%AF%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86/image-4_hu_541b133b180911.png 1024w"
loading="lazy"
alt="词嵌入-4"
class="gallery-image"
data-flex-grow="76"
data-flex-basis="183px"
>&lt;/p>
&lt;p>接下来学习最富盛名的自然语言框架：Transformer模型，也就是隐藏层和输出层的内容。&lt;/p>
&lt;h3 id="transformer模型">Transformer模型
&lt;/h3>&lt;p>Transformer 模型的核心思想是使用**自注意力机制（Self-Attention Mechanism）**来捕捉输入序列中不同位置之间的关系，而不是像 RNN 那样按顺序处理。自注意力机制允许模型同时关注输入序列中的所有位置，从而更好地捕捉长距离依赖关系。&lt;/p>
&lt;p>Transformer的内部，在本质上是一个 encoder-decoder的结构，即编码器-解码器&lt;/p>
&lt;p>&lt;img src="https://blog.8688886.xyz/p/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E4%BB%80%E4%B9%88%E6%98%AF%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86/image-5.png"
width="1518"
height="1044"
srcset="https://blog.8688886.xyz/p/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E4%BB%80%E4%B9%88%E6%98%AF%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86/image-5_hu_91ab61f5aa52de63.png 480w, https://blog.8688886.xyz/p/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E4%BB%80%E4%B9%88%E6%98%AF%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86/image-5_hu_fbc1d5f56fb11ec3.png 1024w"
loading="lazy"
alt="Transformer模型"
class="gallery-image"
data-flex-grow="145"
data-flex-basis="348px"
>&lt;/p>
&lt;p>Transformer工作流程&lt;/p>
&lt;p>&lt;img src="https://blog.8688886.xyz/p/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E4%BB%80%E4%B9%88%E6%98%AF%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86/image-6.png"
width="1156"
height="1706"
srcset="https://blog.8688886.xyz/p/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E4%BB%80%E4%B9%88%E6%98%AF%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86/image-6_hu_7754c7214245fca0.png 480w, https://blog.8688886.xyz/p/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E4%BB%80%E4%B9%88%E6%98%AF%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86/image-6_hu_b574cb11e76db23b.png 1024w"
loading="lazy"
alt="Transformer工作流程"
class="gallery-image"
data-flex-grow="67"
data-flex-basis="162px"
>&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>1. 整体结构：&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>&lt;strong>输入 (Inputs)：&lt;/strong> 模型的原始输入，例如文本序列。&lt;/li>
&lt;li>&lt;strong>输入嵌入 (Input Embedding)：&lt;/strong> 将输入的词语转换为词向量表示。&lt;/li>
&lt;li>&lt;strong>位置编码 (Positional Encoding)：&lt;/strong> 为词向量添加位置信息，以表示词语在序列中的顺序。&lt;/li>
&lt;li>&lt;strong>编码器 (Encoder)：&lt;/strong> 负责处理输入序列，提取文本的语义信息。&lt;/li>
&lt;li>&lt;strong>解码器 (Decoder)：&lt;/strong> 负责根据编码器的输出，生成目标序列。&lt;/li>
&lt;li>&lt;strong>输出 (Outputs)：&lt;/strong> 模型的最终输出，例如翻译后的文本，或者分类结果。&lt;/li>
&lt;li>&lt;strong>输出概率 (Output Probabilities)：&lt;/strong> 对输出进行概率化处理，以便进行概率预测。&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>2. 具体步骤详解：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>输入 (Inputs)：&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;ul>
&lt;li>图中显示输入为 “我 是 一个 学生”，这可以是任何文本序列，例如一句话、一篇文章等。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>输入嵌入 (Input Embedding)：&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;ul>
&lt;li>&lt;strong>目的：&lt;/strong> 将输入的词语转换为计算机可以处理的数值向量，即词向量。&lt;/li>
&lt;li>&lt;strong>过程：&lt;/strong> 每个词语通过一个嵌入层（Embedding Layer）映射到一个高维向量空间，例如，“我” 可能被表示为 [0.1, 0.2, -0.3, 0.5 &amp;hellip;]。&lt;/li>
&lt;li>&lt;strong>图中， “Input Embedding” 模块负责完成这个转换。&lt;/strong>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>位置编码 (Positional Encoding)：&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;ul>
&lt;li>&lt;strong>目的：&lt;/strong> 由于 Transformer 模型没有 RNN 的顺序处理机制，需要额外的位置编码来表示词语在句子中的位置信息。&lt;/li>
&lt;li>&lt;strong>过程：&lt;/strong> 位置编码通过一个特定的函数生成，并与词向量相加，从而将位置信息融入到词向量中。&lt;/li>
&lt;li>&lt;strong>图中， “Positional Encoding” 模块负责生成位置编码，并与词向量相加。&lt;/strong>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>编码器 (Encoder)：&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;ul>
&lt;li>&lt;strong>目的：&lt;/strong> 提取输入序列的语义信息。&lt;/li>
&lt;li>&lt;strong>结构：&lt;/strong> 由 Nx 个相同的编码器层堆叠而成（图中显示 Nx）。每一层编码器包含：&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;ul>
&lt;li>
&lt;ul>
&lt;li>&lt;strong>多头注意力层 (Multi-Head Attention)：&lt;/strong> 这是 Transformer 模型的核心，它使用自注意力机制来计算输入序列中不同位置之间的关系。&lt;/li>
&lt;li>&lt;strong>前馈神经网络 (Feed Forward)：&lt;/strong> 对每个位置的输出进行非线性变换。&lt;/li>
&lt;li>&lt;strong>加和 &amp;amp; 归一化 (Add &amp;amp; Norm)：&lt;/strong> 使用残差连接和层归一化来稳定训练过程，加速收敛。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;ul>
&lt;li>&lt;strong>图中，橙色框代表编码器，它接收经过位置编码的输入，并通过多层注意力机制和前馈网络提取特征。&lt;/strong>&lt;/li>
&lt;li>&lt;strong>编码器的输出是包含了输入序列语义信息的向量表示。&lt;/strong>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>解码器 (Decoder)：&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;ul>
&lt;li>&lt;strong>目的：&lt;/strong> 根据编码器的输出，生成目标序列。&lt;/li>
&lt;li>&lt;strong>结构：&lt;/strong> 由 Nx 个相同的解码器层堆叠而成（图中显示 Nx）。每一层解码器包含：&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;ul>
&lt;li>
&lt;ul>
&lt;li>&lt;strong>掩码多头注意力层 (Masked Multi-Head Attention)：&lt;/strong> 与编码器的多头注意力层类似，但只关注解码器当前位置之前的信息，避免信息泄露。&lt;/li>
&lt;li>&lt;strong>多头注意力层 (Multi-Head Attention)：&lt;/strong> 计算解码器当前位置与编码器输出之间的注意力权重，用于将编码器的信息融入到解码器中。&lt;/li>
&lt;li>&lt;strong>前馈神经网络 (Feed Forward)：&lt;/strong> 与编码器中的前馈网络类似。&lt;/li>
&lt;li>&lt;strong>加和 &amp;amp; 归一化 (Add &amp;amp; Norm)：&lt;/strong> 与编码器中的残差连接和层归一化类似。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;ul>
&lt;li>&lt;strong>图中，粉色框代表解码器，它接收编码器的输出，并通过多层注意力机制和前馈网络生成目标序列。&lt;/strong>&lt;/li>
&lt;li>&lt;strong>解码器是自回归的，它逐词生成目标序列。&lt;/strong>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>输出嵌入 (Output Embedding)：&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;ul>
&lt;li>&lt;strong>目的：&lt;/strong> 将目标序列的词语转换为词向量。&lt;/li>
&lt;li>&lt;strong>过程：&lt;/strong> 与输入嵌入类似，每个目标词语通过一个嵌入层映射到一个高维向量空间。&lt;/li>
&lt;li>&lt;strong>图中，“Output Embedding” 模块负责目标词语的向量化。&lt;/strong>&lt;/li>
&lt;li>&lt;strong>在训练过程中，解码器的输入是目标序列，但向右移动一位，第一个输入是起始符&lt;/strong> &lt;code>**&amp;lt;start&amp;gt;**&lt;/code>&lt;strong>，最后一个输入是结束符&lt;/strong> &lt;code>**&amp;lt;end&amp;gt;**&lt;/code>&lt;strong>。&lt;/strong>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>线性层 (Linear)：&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;ul>
&lt;li>&lt;strong>目的：&lt;/strong> 将解码器的输出转换为与词汇表大小相同的向量，用于计算每个词语的概率。&lt;/li>
&lt;li>&lt;strong>过程：&lt;/strong> 通过一个线性变换，将解码器的输出映射到一个词汇表大小的空间。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Softmax：&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;ul>
&lt;li>&lt;strong>目的：&lt;/strong> 将线性层的输出转换为概率分布，用于预测下一个词语。&lt;/li>
&lt;li>&lt;strong>过程：&lt;/strong> Softmax 函数将线性层的输出转换为一个概率分布，每个位置的值表示该位置是词汇表中某个词语的概率。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>输出概率 (Output Probabilities)：&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;ul>
&lt;li>&lt;strong>目的：&lt;/strong> 表示模型预测的下一个词语的概率分布。&lt;/li>
&lt;li>&lt;strong>图中，输出显示了生成目标序列 “i am a student” 的过程，每个词语都对应一个概率分布。&lt;/strong>&lt;/li>
&lt;li>&lt;strong>例如，第一个输出 “i” 的概率最高，第二个输出 “am” 的概率最高，以此类推。&lt;/strong>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>&lt;/blockquote>
&lt;p>&lt;img src="https://blog.8688886.xyz/p/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E4%BB%80%E4%B9%88%E6%98%AF%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86/image-7.png"
width="940"
height="207"
srcset="https://blog.8688886.xyz/p/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E4%BB%80%E4%B9%88%E6%98%AF%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86/image-7_hu_552aaed610e647f0.png 480w, https://blog.8688886.xyz/p/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E4%BB%80%E4%B9%88%E6%98%AF%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86/image-7_hu_6df0452228c2173a.png 1024w"
loading="lazy"
alt="HF"
class="gallery-image"
data-flex-grow="454"
data-flex-basis="1089px"
>&lt;/p></description></item><item><title>人工智能：什么是神经网络</title><link>https://blog.8688886.xyz/p/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E4%BB%80%E4%B9%88%E6%98%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/</link><pubDate>Fri, 07 Feb 2025 11:30:28 +0000</pubDate><author>86@example.com (八 六)</author><guid>https://blog.8688886.xyz/p/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E4%BB%80%E4%B9%88%E6%98%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/</guid><description>&lt;img src="https://blog.8688886.xyz/p/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E4%BB%80%E4%B9%88%E6%98%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/image-1.png" alt="Featured image of post 人工智能：什么是神经网络" />&lt;p>人工神经网络（Artificial Neural Network ，简写：ANN）是模仿生物神经系统（特别是人脑）结构和功能的一种计算模型。它们是深度学习的核心组成部分，赋予了深度学习强大的模式识别和学习能力。&lt;/p>
&lt;p>&lt;img src="https://blog.8688886.xyz/p/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E4%BB%80%E4%B9%88%E6%98%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/image.png"
width="1125"
height="1277"
srcset="https://blog.8688886.xyz/p/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E4%BB%80%E4%B9%88%E6%98%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/image_hu_645a7a95ef806ba5.png 480w, https://blog.8688886.xyz/p/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E4%BB%80%E4%B9%88%E6%98%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/image_hu_dc084fea3dc550ee.png 1024w"
loading="lazy"
alt="神经末梢"
class="gallery-image"
data-flex-grow="88"
data-flex-basis="211px"
>&lt;/p>
&lt;p>&lt;strong>神经网络的基本结构：&lt;/strong>&lt;/p>
&lt;p>一个基本的神经网络由以下几个部分组成：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>神经元（Neuron）：&lt;/strong> 也称为节点，是神经网络的基本单元。每个神经元接收输入，进行某种处理，然后产生输出。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>连接（Connection）：&lt;/strong> 神经元之间通过连接相互传递信息。每个连接都有一个权重（Weight），表示连接的强度。权重决定了输入信号对输出的影响程度。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>层（Layer）：&lt;/strong> 神经元按层组织。一个典型的神经网络包括：&lt;/p>
&lt;/li>
&lt;li>
&lt;ul>
&lt;li>&lt;strong>输入层（Input Layer）：&lt;/strong> 接收外部输入数据。&lt;/li>
&lt;li>&lt;strong>隐藏层（Hidden Layer）：&lt;/strong> 位于输入层和输出层之间，负责对输入数据进行处理和转换。深度学习中的“深度”就体现在这里，拥有多个隐藏层。&lt;/li>
&lt;li>&lt;strong>输出层（Output Layer）：&lt;/strong> 产生最终的输出结果。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>特点&lt;/strong>：&lt;/p>
&lt;/li>
&lt;li>
&lt;ul>
&lt;li>同一层的神经元之间没有连接。&lt;/li>
&lt;li>第N层的每个神经元和第N-1层的所有神经元相连（这就是full connection的含义），也称为全连接神经网络。&lt;/li>
&lt;li>第N-1层神经元的输出就是第N层神经元的输入。&lt;/li>
&lt;li>每个连接都有一个权重值（w系数和b系数）。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>神经网络的工作原理：&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>&lt;strong>输入：&lt;/strong> 输入数据被传递到输入层的神经元。&lt;/li>
&lt;li>&lt;strong>加权和：&lt;/strong> 每个神经元接收来自上一层神经元的输入，并将这些输入乘以相应的权重进行加权求和。&lt;/li>
&lt;li>&lt;strong>激活函数：&lt;/strong> 将加权和传递给一个激活函数。激活函数引入了非线性，使得神经网络能够学习复杂的模式。常见的激活函数包括Sigmoid、ReLU、Tanh等。&lt;/li>
&lt;li>&lt;strong>输出：&lt;/strong> 激活函数的输出成为该神经元的输出，并传递到下一层神经元。&lt;/li>
&lt;li>&lt;strong>重复：&lt;/strong> 这个过程在网络中逐层进行，直到到达输出层。&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>训练神经网络：&lt;/strong>&lt;/p>
&lt;p>训练神经网络的过程包括以下几个步骤：&lt;/p>
&lt;ol>
&lt;li>&lt;strong>前向传播（Forward Propagation）&lt;/strong>：将输入数据通过网络各层传递，计算每个神经元的输出，直到产生最终输出。&lt;/li>
&lt;li>&lt;strong>损失函数（Loss Function）&lt;/strong>：计算预测输出和实际标签之间的误差。这种误差称为损失，常见的损失函数有均方误差（MSE）和交叉熵损失（Cross-Entropy Loss）。&lt;/li>
&lt;li>&lt;strong>反向传播（Backpropagation）&lt;/strong>：通过损失函数的梯度计算，反向调整每个神经元的权重，以最小化损失。反向传播算法使用链式法则来高效计算梯度。&lt;/li>
&lt;li>&lt;strong>优化器（Optimizer）&lt;/strong>：使用优化算法（如梯度下降、Adam 等）根据计算出的梯度更新网络权重，从而减小损失。&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://blog.8688886.xyz/p/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E4%BB%80%E4%B9%88%E6%98%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/image-1.png"
width="1125"
height="587"
srcset="https://blog.8688886.xyz/p/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E4%BB%80%E4%B9%88%E6%98%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/image-1_hu_599f0df71dabbc9a.png 480w, https://blog.8688886.xyz/p/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E4%BB%80%E4%B9%88%E6%98%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/image-1_hu_2d163e04ebcffbcc.png 1024w"
loading="lazy"
alt="神经网络样例"
class="gallery-image"
data-flex-grow="191"
data-flex-basis="459px"
>&lt;/p>
&lt;h3 id="激活函数">激活函数
&lt;/h3>&lt;p>加权和在进行输入计算后始终是&lt;strong>线性&lt;/strong>的，需要引入激活函数用于对每层的输出数据进行变换，进而为整个网络注入非线性因素，此时神经网络可以拟合出各种曲线，以此来表达复杂问题的解答。&lt;/p>
&lt;p>&lt;strong>Pytorch中封装了常见的激活函数&lt;/strong>&lt;/p>
&lt;p>&lt;strong>sigmoid 激活函数&amp;ndash; 指数型&lt;/strong>&lt;/p>
&lt;p>&lt;code>sigmoid&lt;/code>函数一般只用于&lt;strong>二分类&lt;/strong>的&lt;strong>输出层&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://blog.8688886.xyz/p/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E4%BB%80%E4%B9%88%E6%98%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/image-2.png"
width="1125"
height="642"
srcset="https://blog.8688886.xyz/p/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E4%BB%80%E4%B9%88%E6%98%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/image-2_hu_109efa805cc9bc9f.png 480w, https://blog.8688886.xyz/p/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E4%BB%80%E4%B9%88%E6%98%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/image-2_hu_3fe41a6e746abaaa.png 1024w"
loading="lazy"
alt="sigmoid 激活函数"
class="gallery-image"
data-flex-grow="175"
data-flex-basis="420px"
>&lt;/p>
&lt;p>Sigmoid函数，也称为S型函数或乙状函数，是一种形状像字母“S”的数学函数。它在机器学习，特别是深度学习和逻辑回归中，作为激活函数被广泛使用。&lt;/p>
&lt;p>&lt;strong>定义和公式：&lt;/strong>&lt;/p>
&lt;p>Sigmoid函数最常见的形式是&lt;strong>逻辑斯谛函数&lt;/strong>，其公式如下：&lt;/p>
&lt;p>σ(x) = 1 / (1 + e&lt;sup>-x&lt;/sup>)&lt;/p>
&lt;p>其中：&lt;/p>
&lt;ul>
&lt;li>σ(x) 是函数的输出值。&lt;/li>
&lt;li>x 是函数的输入值（可以是任意实数）。&lt;/li>
&lt;li>e 是自然常数（约等于2.71828）。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>图像和特性：&lt;/strong>&lt;/p>
&lt;p>Sigmoid函数的图像呈S形，具有以下特性：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>定义域：&lt;/strong> (−∞, +∞) （输入可以是任意实数）&lt;/li>
&lt;li>&lt;strong>值域：&lt;/strong> (0, 1) （输出值始终在0和1之间，但不包括0和1）&lt;/li>
&lt;li>&lt;strong>单调递增：&lt;/strong> 输入值越大，输出值也越大。&lt;/li>
&lt;li>&lt;strong>连续光滑：&lt;/strong> 函数曲线平滑连续，处处可导。&lt;/li>
&lt;li>&lt;strong>在x=0处中心对称：&lt;/strong> σ(0) = 0.5。&lt;/li>
&lt;li>&lt;strong>导数：&lt;/strong> σ&amp;rsquo;(x) = σ(x)(1 - σ(x))，导数可以用函数自身来表示，这在反向传播算法中非常有用。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Sigmoid函数在神经网络中的应用：&lt;/strong>&lt;/p>
&lt;p>在神经网络中，Sigmoid函数通常作为激活函数使用，其主要作用是引入非线性。如果没有激活函数，神经网络就只能进行线性运算，表达能力非常有限。Sigmoid函数将神经元的加权输入转换为0到1之间的输出，可以看作是神经元“激活”的概率。&lt;/p>
&lt;p>&lt;strong>Sigmoid函数的优缺点：&lt;/strong>&lt;/p>
&lt;p>&lt;strong>优点：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>输出范围有限：&lt;/strong> 将输出限制在0到1之间，可以方便地表示概率或进行归一化。&lt;/li>
&lt;li>&lt;strong>光滑可导：&lt;/strong> 方便进行梯度计算，用于反向传播算法。&lt;/li>
&lt;li>&lt;strong>易于理解和使用：&lt;/strong> 函数形式简单，易于实现。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>缺点：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>梯度消失：&lt;/strong> 当输入值非常大或非常小时，函数的梯度接近于0。这会导致在反向传播过程中，梯度难以传递到前面的层，从而导致网络训练缓慢甚至停滞。这是Sigmoid函数最大的缺点，也是它在深度神经网络中逐渐被其他激活函数（如ReLU）取代的主要原因。&lt;/li>
&lt;li>&lt;strong>输出不是以0为中心：&lt;/strong> 输出值始终为正，这可能会导致一些优化问题。&lt;/li>
&lt;li>&lt;strong>计算量较大：&lt;/strong> 计算指数运算相对耗时。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>ReLU激活函数-分段型&lt;/strong>&lt;/p>
&lt;p>&lt;code>ReLu&lt;/code>函数常用于&lt;strong>隐藏层&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://blog.8688886.xyz/p/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E4%BB%80%E4%B9%88%E6%98%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/image-3.png"
width="1125"
height="568"
srcset="https://blog.8688886.xyz/p/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E4%BB%80%E4%B9%88%E6%98%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/image-3_hu_c607993782f946d0.png 480w, https://blog.8688886.xyz/p/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E4%BB%80%E4%B9%88%E6%98%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/image-3_hu_b97926b737639c65.png 1024w"
loading="lazy"
alt="ReLU激活函数"
class="gallery-image"
data-flex-grow="198"
data-flex-basis="475px"
>&lt;/p>
&lt;p>&lt;strong>定义和公式：&lt;/strong>&lt;/p>
&lt;p>ReLU函数的数学表达式非常简单：&lt;/p>
&lt;p>f(x) = max(0, x)&lt;/p>
&lt;p>这意味着：&lt;/p>
&lt;ul>
&lt;li>当输入x大于0时，输出等于输入本身（f(x) = x）。&lt;/li>
&lt;li>当输入x小于等于0时，输出为0。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>图像和特性：&lt;/strong>&lt;/p>
&lt;p>ReLU函数的图像由两条直线组成，在x=0处有一个拐点。其主要特性包括：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>非线性：&lt;/strong> ReLU函数虽然形式简单，但它是一个非线性函数，这使得神经网络能够学习复杂的模式。&lt;/li>
&lt;li>&lt;strong>计算简单：&lt;/strong> ReLU函数只需要进行简单的比较和赋值操作，计算速度非常快。&lt;/li>
&lt;li>&lt;strong>单侧抑制：&lt;/strong> 当输入小于0时，输出恒为0，这导致一部分神经元处于“非激活”状态，有助于网络的稀疏性表达，减少参数之间的相互依赖，缓解过拟合。&lt;/li>
&lt;li>&lt;strong>不存在梯度消失问题（在正区间）：&lt;/strong> 当输入大于0时，梯度恒为1，这使得梯度可以有效地传递到前面的层，避免了梯度消失问题，加快了网络训练速度。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>ReLU函数的优缺点：&lt;/strong>&lt;/p>
&lt;p>&lt;strong>优点：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>缓解梯度消失问题：&lt;/strong> 这是ReLU最重要的优点之一，它有效地解决了Sigmoid和tanh等激活函数在输入较大或较小时容易出现的梯度消失问题，使得深度神经网络更容易训练。&lt;/li>
&lt;li>&lt;strong>计算速度快：&lt;/strong> 相比于Sigmoid和tanh等需要进行指数运算的激活函数，ReLU的计算速度非常快，这大大加快了网络的训练速度。&lt;/li>
&lt;li>&lt;strong>促进稀疏性：&lt;/strong> ReLU的单侧抑制特性使得一部分神经元输出为0，从而产生稀疏的网络结构，有助于减少参数之间的相互依赖，提高模型的泛化能力。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>缺点：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Dead ReLU Problem（神经元死亡问题）：&lt;/strong> 如果某个神经元的输入在训练过程中一直为负数，那么该神经元的输出将始终为0，导致该神经元“死亡”，不再对网络的学习起到作用。这通常是由于较大的学习率或不合适的初始化参数导致的。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>ReLU的变体：&lt;/strong>&lt;/p>
&lt;p>为了解决Dead ReLU Problem，人们提出了一些ReLU的变体，例如：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Leaky ReLU（带泄漏的ReLU）：&lt;/strong> 将输入小于0的部分赋予一个很小的斜率，而不是直接设为0。例如，f(x) = x (x&amp;gt;0)；f(x) = αx (x&amp;lt;=0)，其中α是一个很小的常数，例如0.01。这避免了神经元完全“死亡”的情况。&lt;/li>
&lt;li>&lt;strong>Parametric ReLU (PReLU，参数化ReLU)：&lt;/strong> 将Leaky ReLU中的α作为一个可学习的参数，通过反向传播进行学习。&lt;/li>
&lt;li>&lt;strong>Exponential Linear Unit (ELU，指数线性单元)：&lt;/strong> 在输入小于0的部分使用指数函数，而不是简单的线性函数。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>ReLU在神经网络中的应用：&lt;/strong>&lt;/p>
&lt;p>ReLU及其变体是目前深度学习中最常用的激活函数之一，尤其在卷积神经网络（CNN）中应用广泛。通常来说，ReLU是隐藏层激活函数的首选。&lt;/p>
&lt;p>&lt;strong>SoftMax激活函数&lt;/strong>&lt;/p>
&lt;p>常用于处理&lt;strong>多分类问题&lt;/strong>的&lt;strong>输出层&lt;/strong>，将多分类结果以&lt;strong>概率&lt;/strong>的形式展示。&lt;/p>
&lt;p>&lt;img src="https://blog.8688886.xyz/p/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E4%BB%80%E4%B9%88%E6%98%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/image-4.png"
width="1125"
height="677"
srcset="https://blog.8688886.xyz/p/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E4%BB%80%E4%B9%88%E6%98%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/image-4_hu_552f8958335d1d42.png 480w, https://blog.8688886.xyz/p/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E4%BB%80%E4%B9%88%E6%98%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/image-4_hu_285523e76caac399.png 1024w"
loading="lazy"
alt="SoftMax激活函数"
class="gallery-image"
data-flex-grow="166"
data-flex-basis="398px"
>&lt;/p>
&lt;p>&lt;strong>定义和公式：&lt;/strong>&lt;/p>
&lt;p>给定一个包含 n 个实数的向量 z = (z&lt;sub>1&lt;/sub>, z&lt;sub>2&lt;/sub>, &amp;hellip;, z&lt;sub>n&lt;/sub>)，Softmax 函数的定义如下：&lt;/p>
&lt;p>Softmax(z)&lt;sub>i&lt;/sub> = e&lt;sup>z&lt;sub>i&lt;/sub>&lt;/sup> / Σ&lt;sub>j=1&lt;/sub>&lt;sup>n&lt;/sup> e&lt;sup>z&lt;sub>j&lt;/sub>&lt;/sup>&lt;/p>
&lt;p>其中：&lt;/p>
&lt;ul>
&lt;li>Softmax(z)&lt;sub>i&lt;/sub> 表示向量 z 的第 i 个元素的 Softmax 输出。&lt;/li>
&lt;li>e 是自然常数（约等于 2.71828）。&lt;/li>
&lt;li>Σ&lt;sub>j=1&lt;/sub>&lt;sup>n&lt;/sup> e&lt;sup>z&lt;sub>j&lt;/sub>&lt;/sup> 表示对向量 z 的所有元素的指数求和。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>工作原理：&lt;/strong>&lt;/p>
&lt;p>Softmax 函数首先对输入向量的每个元素取指数，然后将每个元素的指数值除以所有元素指数值的总和。这样就保证了输出向量的每个元素都在 (0, 1) 之间，并且所有元素的总和为 1，从而构成了一个概率分布。&lt;/p>
&lt;p>&lt;strong>Softmax 在神经网络中的应用：&lt;/strong>&lt;/p>
&lt;p>Softmax 函数通常用于神经网络的输出层，尤其是在多分类问题中。例如，在图像分类任务中，神经网络的输出层可以有 10 个神经元，分别对应 10 个不同的类别。经过 Softmax 函数处理后，输出层每个神经元的输出就表示该图像属于对应类别的概率。&lt;/p>
&lt;p>&lt;strong>Softmax 的优点：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>输出为概率分布：&lt;/strong> Softmax 的输出可以直接解释为概率，方便进行分类决策。&lt;/li>
&lt;li>&lt;strong>突出最大值：&lt;/strong> Softmax 函数能够突出输入向量中值最大的元素，使得分类结果更加明确。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Softmax 的缺点：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>计算开销：&lt;/strong> 需要计算指数和求和，计算开销相对较大。&lt;/li>
&lt;li>&lt;strong>梯度消失（在某些情况下）：&lt;/strong> 当输入向量的某些元素值非常大时，可能会导致梯度消失问题。&lt;/li>
&lt;li>&lt;strong>对输入变化敏感：&lt;/strong> 输入向量的微小变化可能会导致输出概率的较大变化。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Softmax 与其他激活函数的比较：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>与 Sigmoid 的比较：&lt;/strong> Sigmoid 函数通常用于二分类问题，而 Softmax 函数则用于多分类问题。当类别数为 2 时，Softmax 函数退化为 Sigmoid 函数。&lt;/li>
&lt;li>&lt;strong>与 ReLU 的比较：&lt;/strong> ReLU 函数主要用于隐藏层，而 Softmax 函数主要用于输出层。ReLU 解决了 Sigmoid 的梯度消失问题，但 Softmax 仍然在多分类输出层占有重要地位。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>总结：&lt;/strong>&lt;/p>
&lt;p>Softmax 激活函数是一种重要的激活函数，尤其在多分类问题中应用广泛。它将输入向量转换为概率分布，方便进行分类决策。虽然存在一些缺点，但仍然是深度学习中不可或缺的一部分。&lt;/p>
&lt;p>&lt;strong>补充说明：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>为了数值稳定性，在实际应用中，通常会对 Softmax 函数的计算进行一些改进，例如减去输入向量的最大值。&lt;/li>
&lt;li>Softmax 函数通常与交叉熵损失函数一起使用，以优化神经网络的训练。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>示例：&lt;/strong>&lt;/p>
&lt;p>假设有一个输入向量 z = [2, 1, 0]，则 Softmax 的计算过程如下：&lt;/p>
&lt;ol>
&lt;li>计算每个元素的指数：&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>
&lt;ul>
&lt;li>e&lt;sup>2&lt;/sup> ≈ 7.39&lt;/li>
&lt;li>e&lt;sup>1&lt;/sup> ≈ 2.72&lt;/li>
&lt;li>e&lt;sup>0&lt;/sup> = 1&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;ol>
&lt;li>计算所有元素指数值的总和：&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>
&lt;ul>
&lt;li>7.39 + 2.72 + 1 = 11.11&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;ol>
&lt;li>计算每个元素的 Softmax 输出：&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>
&lt;ul>
&lt;li>Softmax(z)&lt;sub>1&lt;/sub> = 7.39 / 11.11 ≈ 0.665&lt;/li>
&lt;li>Softmax(z)&lt;sub>2&lt;/sub> = 2.72 / 11.11 ≈ 0.245&lt;/li>
&lt;li>Softmax(z)&lt;sub>3&lt;/sub> = 1 / 11.11 ≈ 0.090&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>因此，Softmax(z) ≈ [0.665, 0.245, 0.090]。可以看到，这三个数的和接近于 1，并且每个数都在 0 到 1 之间。&lt;/p>
&lt;p>&lt;strong>激活函数的选择方法&lt;/strong>
对于隐藏层：&lt;/p>
&lt;ol>
&lt;li>优先选择&lt;code>ReLU&lt;/code>激活函数&lt;/li>
&lt;li>如果&lt;code>relu&lt;/code>效果不好，那么尝试其他激活，如&lt;code>leaky ReLU&lt;/code>等。&lt;/li>
&lt;li>如果你使用了ReLU,需要注意一下&lt;code>dead ReLU&lt;/code>问题，避免出现大的梯度从而导致过多的神经元死亡。&lt;/li>
&lt;/ol>
&lt;p>对于输出层：&lt;/p>
&lt;ol>
&lt;li>二分类问题选择&lt;code>sigmoid&lt;/code>激活函数&lt;/li>
&lt;li>多分类问题选择&lt;code>SoftMax&lt;/code>激活函数&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>其他常见的激活函数&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://blog.8688886.xyz/p/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E4%BB%80%E4%B9%88%E6%98%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/image-5.png"
width="1125"
height="975"
srcset="https://blog.8688886.xyz/p/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E4%BB%80%E4%B9%88%E6%98%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/image-5_hu_cf3d7d57d21a7a9f.png 480w, https://blog.8688886.xyz/p/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E4%BB%80%E4%B9%88%E6%98%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/image-5_hu_8b2510f1e968fa40.png 1024w"
loading="lazy"
alt="激活函数"
class="gallery-image"
data-flex-grow="115"
data-flex-basis="276px"
>&lt;/p>
&lt;h3 id="损失函数">损失函数
&lt;/h3>&lt;p>什么是损失函数&lt;/p>
&lt;p>用来&lt;strong>衡量模型参数质量&lt;/strong>的&lt;strong>函数&lt;/strong>，衡量的方式是比较神经网络输出和真实输出的差异，**损失函数告诉我们模型“犯了多大的错误”。通过最小化损失函数，我们可以优化模型的参数，使其预测结果更接近真实值。**例如：输入一张猫的照片，看输出的结果，&lt;/p>
&lt;p>&lt;img src="https://blog.8688886.xyz/p/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E4%BB%80%E4%B9%88%E6%98%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/image-6.png"
width="1125"
height="490"
srcset="https://blog.8688886.xyz/p/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E4%BB%80%E4%B9%88%E6%98%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/image-6_hu_31caf0c72f811138.png 480w, https://blog.8688886.xyz/p/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E4%BB%80%E4%B9%88%E6%98%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/image-6_hu_d1cb0013b9a51a90.png 1024w"
loading="lazy"
alt="损失函数"
class="gallery-image"
data-flex-grow="229"
data-flex-basis="551px"
>&lt;/p>
&lt;p>&lt;strong>损失函数的作用：&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>&lt;strong>指导模型训练：&lt;/strong> 在训练过程中，优化算法（如梯度下降）会根据损失函数的梯度来调整模型参数，从而使损失函数的值不断减小。&lt;/li>
&lt;li>&lt;strong>评估模型性能：&lt;/strong> 在训练完成后，我们可以使用损失函数来评估模型在测试集上的表现，从而了解模型的泛化能力。&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>常见的损失函数：&lt;/strong>&lt;/p>
&lt;p>损失函数可以根据任务类型进行分类，主要分为以下两类：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>回归问题损失函数：&lt;/strong> 用于预测连续值的任务。&lt;/li>
&lt;li>&lt;strong>分类问题损失函数：&lt;/strong> 用于预测离散类别的任务。&lt;/li>
&lt;/ul>
&lt;p>分类问题损失函数&lt;/p>
&lt;p>&lt;strong>交叉熵损失（Cross-Entropy Loss）：&lt;/strong> 常用于多分类问题。&lt;/p>
&lt;p>在多分类任务通常使用softmax将logits转换为概率的形式&lt;/p>
&lt;p>&lt;img src="https://blog.8688886.xyz/p/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E4%BB%80%E4%B9%88%E6%98%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/image-7.png"
width="1125"
height="605"
srcset="https://blog.8688886.xyz/p/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E4%BB%80%E4%B9%88%E6%98%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/image-7_hu_7dd2c196c3ceb51b.png 480w, https://blog.8688886.xyz/p/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E4%BB%80%E4%B9%88%E6%98%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/image-7_hu_de14893cb9134aca.png 1024w"
loading="lazy"
alt="交叉熵损失"
class="gallery-image"
data-flex-grow="185"
data-flex-basis="446px"
>&lt;/p>
&lt;p>H(p, q) = - Σp(x)log(q(x))&lt;/p>
&lt;p>其中，p(x) 是真实概率分布，q(x) 是预测概率分布。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>优点：&lt;/strong> 能够有效地衡量两个概率分布之间的差异，优化效果好。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>损失函数与激活函数的关系：&lt;/strong>&lt;/p>
&lt;p>损失函数和激活函数是深度学习模型中两个重要的组成部分，它们之间存在一定的联系。例如，在多分类问题中，通常使用 Softmax 激活函数将输出转换为概率分布，然后使用交叉熵损失函数来衡量预测结果与真实结果之间的差异。&lt;/p>
&lt;h3 id="网络优化方法">网络优化方法
&lt;/h3>&lt;p>梯度下降算法是一种用于&lt;strong>寻找损失函数最小值&lt;/strong>的优化算法&lt;/p>
&lt;p>&lt;img src="https://blog.8688886.xyz/p/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E4%BB%80%E4%B9%88%E6%98%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/image-8.png"
width="1125"
height="535"
srcset="https://blog.8688886.xyz/p/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E4%BB%80%E4%B9%88%E6%98%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/image-8_hu_978617e7d22e20fd.png 480w, https://blog.8688886.xyz/p/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E4%BB%80%E4%B9%88%E6%98%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/image-8_hu_d3eed1a049b4c5e5.png 1024w"
loading="lazy"
alt="梯度下降算法"
class="gallery-image"
data-flex-grow="210"
data-flex-basis="504px"
>&lt;/p>
&lt;p>&lt;strong>核心思想：&lt;/strong>&lt;/p>
&lt;p>想象你站在一座山上，想要下到山谷。梯度下降法就像你在山上寻找最陡峭的下坡路，然后沿着这个方向走一步，重复这个过程，直到到达山谷的最低点。&lt;/p>
&lt;p>&lt;strong>数学原理：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>梯度：&lt;/strong> 在数学中，梯度是一个向量，它指向函数值增长最快的方向。因此，梯度的反方向就是函数值下降最快的方向。&lt;/li>
&lt;li>&lt;strong>迭代：&lt;/strong> 梯度下降法通过不断迭代来逼近最小值。每次迭代，它都会沿着梯度的反方向移动一小步。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>公式：&lt;/strong>&lt;/p>
&lt;p>θ&lt;sub>new&lt;/sub> = θ&lt;sub>old&lt;/sub> - α * ∇J(θ)&lt;/p>
&lt;p>其中：&lt;/p>
&lt;ul>
&lt;li>θ&lt;sub>new&lt;/sub>：更新后的参数值。&lt;/li>
&lt;li>θ&lt;sub>old&lt;/sub>：当前的参数值。&lt;/li>
&lt;li>α：学习率（learning rate），控制每次迭代的步长。&lt;/li>
&lt;li>∇J(θ)：损失函数 J(θ) 关于参数 θ 的梯度。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>步骤：&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>&lt;strong>初始化参数：&lt;/strong> 随机初始化模型的参数 θ。&lt;/li>
&lt;li>&lt;strong>计算梯度：&lt;/strong> 计算损失函数 J(θ) 关于参数 θ 的梯度 ∇J(θ)。&lt;/li>
&lt;li>&lt;strong>更新参数：&lt;/strong> 使用上述公式更新参数 θ。&lt;/li>
&lt;li>&lt;strong>重复步骤 2 和 3：&lt;/strong> 直到损失函数的值收敛到一个可接受的范围内，或者达到预定的迭代次数。&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>不同类型的梯度下降：&lt;/strong>&lt;/p>
&lt;p>根据每次迭代使用的样本数量，梯度下降法可以分为以下几种类型：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>批量梯度下降（Batch Gradient Descent, BGD）：&lt;/strong> 每次迭代使用所有训练样本来计算梯度。&lt;/p>
&lt;/li>
&lt;li>
&lt;ul>
&lt;li>&lt;strong>优点：&lt;/strong> 能够保证收敛到全局最小值（对于凸函数），训练过程相对稳定。&lt;/li>
&lt;li>&lt;strong>缺点：&lt;/strong> 计算量大，训练速度慢，不适合处理大规模数据集。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>随机梯度下降（Stochastic Gradient Descent, SGD）：&lt;/strong> 每次迭代只使用一个随机选择的训练样本来计算梯度。&lt;/p>
&lt;/li>
&lt;li>
&lt;ul>
&lt;li>&lt;strong>优点：&lt;/strong> 计算速度快，适合处理大规模数据集，有可能跳出局部最小值。&lt;/li>
&lt;li>&lt;strong>缺点：&lt;/strong> 训练过程波动较大，不容易收敛到全局最小值。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>小批量梯度下降（Mini-batch Gradient Descent, MBGD）：&lt;/strong> 每次迭代使用一小部分随机选择的训练样本（称为一个 mini-batch）来计算梯度。&lt;/p>
&lt;/li>
&lt;li>
&lt;ul>
&lt;li>&lt;strong>优点：&lt;/strong> 结合了 BGD 和 SGD 的优点，既能保证一定的稳定性，又能加快训练速度。&lt;/li>
&lt;li>&lt;strong>缺点：&lt;/strong> 需要选择合适的 mini-batch 大小。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>学习率的选择：&lt;/strong>&lt;/p>
&lt;p>学习率 α 是梯度下降法中一个重要的超参数，它控制了每次迭代的步长。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>学习率过大：&lt;/strong> 可能导致算法在最小值附近震荡，无法收敛。&lt;/li>
&lt;li>&lt;strong>学习率过小：&lt;/strong> 可能导致收敛速度过慢。&lt;/li>
&lt;/ul>
&lt;p>通常需要通过实验来选择合适的学习率。常用的方法包括：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>试错法：&lt;/strong> 尝试不同的学习率，观察训练效果。&lt;/li>
&lt;li>&lt;strong>学习率衰减：&lt;/strong> 随着训练的进行，逐渐减小学习率。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>总结：&lt;/strong>&lt;/p>
&lt;p>梯度下降法是一种简单而有效的优化算法，在机器学习和深度学习中有着广泛的应用。理解其基本原理、不同类型以及学习率的选择对于有效地使用梯度下降法至关重要。&lt;/p>
&lt;p>&lt;strong>补充说明：&lt;/strong>&lt;/p>
&lt;p>除了基本的梯度下降法，还有许多改进的优化算法，例如：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>动量法（Momentum）：&lt;/strong> 引入动量来加速收敛，并减少震荡。&lt;/li>
&lt;li>&lt;strong>Adam 优化器：&lt;/strong> 结合了动量法和 RMSProp 的优点，是一种常用的自适应优化算法。&lt;/li>
&lt;/ul>
&lt;p>这些改进的优化算法通常能够更快地收敛到最小值，并且对学习率的选择不那么敏感。&lt;/p>
&lt;h3 id="前向传播和反向传播">前向传播和反向传播
&lt;/h3>&lt;p>前向传播 传参正向计算的过程&lt;/p>
&lt;p>反向传播 参数优化的过程，调整权重参数weight，先从深层开始，逐步到浅层。&lt;/p>
&lt;p>&lt;img src="https://blog.8688886.xyz/p/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E4%BB%80%E4%B9%88%E6%98%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/image-9.png"
width="1125"
height="516"
srcset="https://blog.8688886.xyz/p/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E4%BB%80%E4%B9%88%E6%98%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/image-9_hu_1a80d084c78cd41d.png 480w, https://blog.8688886.xyz/p/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E4%BB%80%E4%B9%88%E6%98%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/image-9_hu_a6ff502ab77e9591.png 1024w"
loading="lazy"
alt="前向传播和反向传播"
class="gallery-image"
data-flex-grow="218"
data-flex-basis="523px"
>&lt;/p>
&lt;p>&lt;strong>前向传播和反向传播视频教程&lt;/strong>&lt;/p>
&lt;div class="video-wrapper">
&lt;iframe src="https://player.bilibili.com/player.html?as_wide=1&amp;amp;high_quality=1&amp;amp;page=1&amp;bvid=BV1pQ4y147re"
scrolling="no"
frameborder="no"
framespacing="0"
allowfullscreen="true"
>
&lt;/iframe>
&lt;/div>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">训练效果由传入的训练量决定，越大越好
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">假设100000张图片-&amp;gt;共15g大小
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">batch_size 128 表示一次传入的最大参数128张（越大越好）
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">iter 表示完成一次（128张图片）前向传播和反向传播的**迭代**过程
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">epoch 表示全部数据（100000张图片）完成一次**轮次**训练
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>人工智能：什么是深度学习</title><link>https://blog.8688886.xyz/p/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E4%BB%80%E4%B9%88%E6%98%AF%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/</link><pubDate>Wed, 22 Jan 2025 16:06:24 +0000</pubDate><author>86@example.com (八 六)</author><guid>https://blog.8688886.xyz/p/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E4%BB%80%E4%B9%88%E6%98%AF%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/</guid><description>&lt;img src="https://blog.8688886.xyz/p/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E4%BB%80%E4%B9%88%E6%98%AF%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/image-3.png" alt="Featured image of post 人工智能：什么是深度学习" />&lt;h3 id="什么是深度学习">什么是深度学习
&lt;/h3>&lt;p>&lt;img src="https://blog.8688886.xyz/p/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E4%BB%80%E4%B9%88%E6%98%AF%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/image-3.png"
width="1026"
height="540"
srcset="https://blog.8688886.xyz/p/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E4%BB%80%E4%B9%88%E6%98%AF%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/image-3_hu_ac18458d3d7e619a.png 480w, https://blog.8688886.xyz/p/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E4%BB%80%E4%B9%88%E6%98%AF%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/image-3_hu_9bc7e17440d93726.png 1024w"
loading="lazy"
alt="深度学习对比"
class="gallery-image"
data-flex-grow="190"
data-flex-basis="456px"
>&lt;/p>
&lt;p>机器学习是实现人工智能的一种途径。
深度学习是机器学习的一个子集，也就是一个具体的方法。&lt;/p>
&lt;p>人工智能（AI）、机器学习（ML）和深度学习（DL）是密切相关的概念，它们之间的关系可以用一个包含关系来表示：人工智能 &amp;gt; 机器学习 &amp;gt; 深度学习。&lt;/p>
&lt;p>&lt;strong>1. 人工智能 (AI)&lt;/strong>&lt;/p>
&lt;p>人工智能是计算机科学的一个广阔领域，其目标是创造能够执行通常需要人类智能的任务的机器。这些任务包括：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>问题解决：&lt;/strong> 制定策略和算法来解决复杂问题。&lt;/li>
&lt;li>&lt;strong>学习：&lt;/strong> 从经验中学习并改进性能。&lt;/li>
&lt;li>&lt;strong>推理：&lt;/strong> 使用逻辑和规则得出结论。&lt;/li>
&lt;li>&lt;strong>感知：&lt;/strong> 通过传感器（例如，摄像头、麦克风）感知环境。&lt;/li>
&lt;li>&lt;strong>语言理解：&lt;/strong> 理解和生成人类语言。&lt;/li>
&lt;/ul>
&lt;p>人工智能是一个非常广泛的概念，它涵盖了许多不同的技术和方法。&lt;/p>
&lt;p>&lt;strong>2. 机器学习 (ML)&lt;/strong>&lt;/p>
&lt;p>机器学习是人工智能的一个子领域。它专注于开发允许计算机&lt;em>无需明确编程&lt;/em>即可从数据中学习的算法和技术。换句话说，机器学习算法通过分析大量数据来识别模式、做出预测或做出决策，而无需人工编写具体的规则。&lt;/p>
&lt;p>机器学习的常见类型包括：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>监督学习：&lt;/strong> 使用带有标签的训练数据（即输入和正确的输出）来训练模型。例如，使用图像和对应的标签（例如，“猫”、“狗”）来训练图像分类器。&lt;/li>
&lt;li>&lt;strong>无监督学习：&lt;/strong> 使用没有标签的训练数据来发现数据中的隐藏模式。例如，使用客户购买数据来识别不同的客户群体。&lt;/li>
&lt;li>&lt;strong>强化学习：&lt;/strong> 训练智能体在环境中采取行动，以最大化某种奖励。例如，训练一个游戏AI来赢得比赛。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>3. 深度学习 (DL)&lt;/strong>&lt;/p>
&lt;p>深度学习是机器学习的一个子集。它使用人工神经网络，特别是具有多个层（因此称为“深度”）的神经网络，来处理和分析数据。这些深层神经网络能够学习非常复杂的模式，并且在图像识别、语音识别和自然语言处理等任务中表现出色。&lt;/p>
&lt;p>&lt;strong>深度学习的关键概念是：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>神经网络：&lt;/strong> 受人脑结构启发的计算模型，由相互连接的节点（称为神经元）组成。&lt;/li>
&lt;li>&lt;strong>深度神经网络 (DNN)：&lt;/strong> 具有多个隐藏层的神经网络。这些隐藏层允许网络学习数据的分层表示。&lt;/li>
&lt;li>&lt;strong>反向传播：&lt;/strong> 一种用于训练神经网络的算法，通过调整网络中连接的权重来最小化预测误差。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>它们之间的关系总结：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>人工智能是一个总体的概念，涵盖了所有使机器能够模拟人类智能的技术。&lt;/li>
&lt;li>机器学习是实现人工智能的一种方法，它侧重于使机器能够从数据中学习。&lt;/li>
&lt;li>深度学习是机器学习的一个子集，它使用深层神经网络来实现更高级的学习和模式识别。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>一个简单的类比：&lt;/strong>&lt;/p>
&lt;p>想象一下你想制造一辆自动驾驶汽车。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>人工智能&lt;/strong> 是整个自动驾驶汽车项目的目标，包括感知环境、规划路线、控制车辆等。&lt;/li>
&lt;li>&lt;strong>机器学习&lt;/strong> 是一种方法，用于训练汽车的感知系统，例如通过分析大量图像来识别道路标志和行人。&lt;/li>
&lt;li>&lt;strong>深度学习&lt;/strong> 是一种特定的机器学习技术，用于构建汽车的图像识别系统，它使用深层神经网络来处理图像数据并进行准确的识别。&lt;/li>
&lt;/ul>
&lt;h3 id="深度学习与机器学习的区别">深度学习与机器学习的区别
&lt;/h3>&lt;p>&lt;img src="https://blog.8688886.xyz/p/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E4%BB%80%E4%B9%88%E6%98%AF%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/image.png"
width="1125"
height="563"
srcset="https://blog.8688886.xyz/p/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E4%BB%80%E4%B9%88%E6%98%AF%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/image_hu_2adec968c3028a7b.png 480w, https://blog.8688886.xyz/p/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E4%BB%80%E4%B9%88%E6%98%AF%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/image_hu_94c4e4f78ba62ec4.png 1024w"
loading="lazy"
alt="深度学习与机器学习的区别"
class="gallery-image"
data-flex-grow="199"
data-flex-basis="479px"
>&lt;/p>
&lt;p>机器学习需要依赖人工提取特征，而深度学习不需要进行人工特征提取，只需要把神经网络搭建完成。&lt;/p>
&lt;p>网络结构的设计就是搭建神经网络的过程。&lt;/p>
&lt;h3 id="发展历程">发展历程
&lt;/h3>&lt;p>&lt;img src="https://blog.8688886.xyz/p/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E4%BB%80%E4%B9%88%E6%98%AF%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/image-4.png"
width="1125"
height="573"
srcset="https://blog.8688886.xyz/p/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E4%BB%80%E4%B9%88%E6%98%AF%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/image-4_hu_9578b9ebdf348e49.png 480w, https://blog.8688886.xyz/p/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E4%BB%80%E4%B9%88%E6%98%AF%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/image-4_hu_511cb5ced1099512.png 1024w"
loading="lazy"
alt="发展历程"
class="gallery-image"
data-flex-grow="196"
data-flex-basis="471px"
>&lt;/p>
&lt;p>重点是Tranformer和chatGPT的出现。&lt;/p></description></item><item><title>Markdown Syntax Guide</title><link>https://blog.8688886.xyz/p/markdown-syntax-guide/</link><pubDate>Thu, 07 Sep 2023 00:00:00 +0000</pubDate><author>86@example.com (八 六)</author><guid>https://blog.8688886.xyz/p/markdown-syntax-guide/</guid><description>&lt;p>This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.&lt;/p>
&lt;h2 id="headings">Headings
&lt;/h2>&lt;p>The following HTML &lt;code>&amp;lt;h1&amp;gt;&lt;/code>—&lt;code>&amp;lt;h6&amp;gt;&lt;/code> elements represent six levels of section headings. &lt;code>&amp;lt;h1&amp;gt;&lt;/code> is the highest section level while &lt;code>&amp;lt;h6&amp;gt;&lt;/code> is the lowest.&lt;/p>
&lt;h1 id="h1">H1
&lt;/h1>&lt;h2 id="h2">H2
&lt;/h2>&lt;h3 id="h3">H3
&lt;/h3>&lt;h4 id="h4">H4
&lt;/h4>&lt;h5 id="h5">H5
&lt;/h5>&lt;h6 id="h6">H6
&lt;/h6>&lt;h2 id="paragraph">Paragraph
&lt;/h2>&lt;p>Xerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.&lt;/p>
&lt;p>Itatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.&lt;/p>
&lt;h2 id="blockquotes">Blockquotes
&lt;/h2>&lt;p>The blockquote element represents content that is quoted from another source, optionally with a citation which must be within a &lt;code>footer&lt;/code> or &lt;code>cite&lt;/code> element, and optionally with in-line changes such as annotations and abbreviations.&lt;/p>
&lt;h3 id="blockquote-without-attribution">Blockquote without attribution
&lt;/h3>&lt;blockquote>
&lt;p>Tiam, ad mint andaepu dandae nostion secatur sequo quae.
&lt;strong>Note&lt;/strong> that you can use &lt;em>Markdown syntax&lt;/em> within a blockquote.&lt;/p>&lt;/blockquote>
&lt;h3 id="blockquote-with-attribution">Blockquote with attribution
&lt;/h3>&lt;blockquote>
&lt;p>Don&amp;rsquo;t communicate by sharing memory, share memory by communicating.&lt;br>
— &lt;cite>Rob Pike&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>&lt;/cite>&lt;/p>&lt;/blockquote>
&lt;h2 id="tables">Tables
&lt;/h2>&lt;p>Tables aren&amp;rsquo;t part of the core Markdown spec, but Hugo supports supports them out-of-the-box.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Name&lt;/th>
&lt;th>Age&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Bob&lt;/td>
&lt;td>27&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Alice&lt;/td>
&lt;td>23&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="inline-markdown-within-tables">Inline Markdown within tables
&lt;/h3>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Italics&lt;/th>
&lt;th>Bold&lt;/th>
&lt;th>Code&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;em>italics&lt;/em>&lt;/td>
&lt;td>&lt;strong>bold&lt;/strong>&lt;/td>
&lt;td>&lt;code>code&lt;/code>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>A&lt;/th>
&lt;th>B&lt;/th>
&lt;th>C&lt;/th>
&lt;th>D&lt;/th>
&lt;th>E&lt;/th>
&lt;th>F&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Lorem ipsum dolor sit amet, consectetur adipiscing elit.&lt;/td>
&lt;td>Phasellus ultricies, sapien non euismod aliquam, dui ligula tincidunt odio, at accumsan nulla sapien eget ex.&lt;/td>
&lt;td>Proin eleifend dictum ipsum, non euismod ipsum pulvinar et. Vivamus sollicitudin, quam in pulvinar aliquam, metus elit pretium purus&lt;/td>
&lt;td>Proin sit amet velit nec enim imperdiet vehicula.&lt;/td>
&lt;td>Ut bibendum vestibulum quam, eu egestas turpis gravida nec&lt;/td>
&lt;td>Sed scelerisque nec turpis vel viverra. Vivamus vitae pretium sapien&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="code-blocks">Code Blocks
&lt;/h2>&lt;h3 id="code-block-with-backticks">Code block with backticks
&lt;/h3>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&amp;lt;!doctype html&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">html&lt;/span> &lt;span class="na">lang&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;en&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">head&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">meta&lt;/span> &lt;span class="na">charset&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;utf-8&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">title&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>Example HTML5 Document&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">title&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">head&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">body&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">p&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>Test&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">p&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">body&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">html&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="code-block-indented-with-four-spaces">Code block indented with four spaces
&lt;/h3>&lt;pre>&lt;code>&amp;lt;!doctype html&amp;gt;
&amp;lt;html lang=&amp;quot;en&amp;quot;&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;meta charset=&amp;quot;utf-8&amp;quot;&amp;gt;
&amp;lt;title&amp;gt;Example HTML5 Document&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;p&amp;gt;Test&amp;lt;/p&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code>&lt;/pre>
&lt;h3 id="diff-code-block">Diff code block
&lt;/h3>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-diff" data-lang="diff">&lt;span class="line">&lt;span class="cl">[dependencies.bevy]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git = &amp;#34;https://github.com/bevyengine/bevy&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">rev = &amp;#34;11f52b8c72fc3a568e8bb4a4cd1f3eb025ac2e13&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gd">- features = [&amp;#34;dynamic&amp;#34;]
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gd">&lt;/span>&lt;span class="gi">+ features = [&amp;#34;jpeg&amp;#34;, &amp;#34;dynamic&amp;#34;]
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="one-line-code-block">One line code block
&lt;/h3>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">p&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>A paragraph&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">p&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="list-types">List Types
&lt;/h2>&lt;h3 id="ordered-list">Ordered List
&lt;/h3>&lt;ol>
&lt;li>First item&lt;/li>
&lt;li>Second item&lt;/li>
&lt;li>Third item&lt;/li>
&lt;/ol>
&lt;h3 id="unordered-list">Unordered List
&lt;/h3>&lt;ul>
&lt;li>List item&lt;/li>
&lt;li>Another item&lt;/li>
&lt;li>And another item&lt;/li>
&lt;/ul>
&lt;h3 id="nested-list">Nested list
&lt;/h3>&lt;ul>
&lt;li>Fruit
&lt;ul>
&lt;li>Apple&lt;/li>
&lt;li>Orange&lt;/li>
&lt;li>Banana&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Dairy
&lt;ul>
&lt;li>Milk&lt;/li>
&lt;li>Cheese&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="other-elements--abbr-sub-sup-kbd-mark">Other Elements — abbr, sub, sup, kbd, mark
&lt;/h2>&lt;p>&lt;abbr title="Graphics Interchange Format">GIF&lt;/abbr> is a bitmap image format.&lt;/p>
&lt;p>H&lt;sub>2&lt;/sub>O&lt;/p>
&lt;p>X&lt;sup>n&lt;/sup> + Y&lt;sup>n&lt;/sup> = Z&lt;sup>n&lt;/sup>&lt;/p>
&lt;p>Press &lt;kbd>CTRL&lt;/kbd> + &lt;kbd>ALT&lt;/kbd> + &lt;kbd>Delete&lt;/kbd> to end the session.&lt;/p>
&lt;p>Most &lt;mark>salamanders&lt;/mark> are nocturnal, and hunt for insects, worms, and other small creatures.&lt;/p>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>The above quote is excerpted from Rob Pike&amp;rsquo;s &lt;a class="link" href="https://www.youtube.com/watch?v=PAAkCSZUG1c" target="_blank" rel="noopener"
>talk&lt;/a> during Gopherfest, November 18, 2015.&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item><item><title>Image gallery</title><link>https://blog.8688886.xyz/p/image-gallery/</link><pubDate>Sat, 26 Aug 2023 00:00:00 +0000</pubDate><author>86@example.com (八 六)</author><guid>https://blog.8688886.xyz/p/image-gallery/</guid><description>&lt;img src="https://blog.8688886.xyz/p/image-gallery/2.jpg" alt="Featured image of post Image gallery" />&lt;p>Hugo theme Stack supports the creation of interactive image galleries using Markdown. It&amp;rsquo;s powered by &lt;a class="link" href="https://photoswipe.com/" target="_blank" rel="noopener"
>PhotoSwipe&lt;/a> and its syntax was inspired by &lt;a class="link" href="https://typlog.com/" target="_blank" rel="noopener"
>Typlog&lt;/a>.&lt;/p>
&lt;p>To use this feature, the image must be in the same directory as the Markdown file, as it uses Hugo&amp;rsquo;s page bundle feature to read the dimensions of the image. &lt;strong>External images are not supported.&lt;/strong>&lt;/p>
&lt;h2 id="syntax">Syntax
&lt;/h2>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-markdown" data-lang="markdown">&lt;span class="line">&lt;span class="cl">![&lt;span class="nt">Image 1&lt;/span>](&lt;span class="na">1.jpg&lt;/span>) ![&lt;span class="nt">Image 2&lt;/span>](&lt;span class="na">2.jpg&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="result">Result
&lt;/h2>&lt;p>&lt;img src="https://blog.8688886.xyz/p/image-gallery/1.jpg"
width="2000"
height="1400"
srcset="https://blog.8688886.xyz/p/image-gallery/1_hu_811b671457ffff1f.jpg 480w, https://blog.8688886.xyz/p/image-gallery/1_hu_c74af69dd7c1dcda.jpg 1024w"
loading="lazy"
alt="Image 1"
class="gallery-image"
data-flex-grow="142"
data-flex-basis="342px"
> &lt;img src="https://blog.8688886.xyz/p/image-gallery/2.jpg"
width="1500"
height="2250"
srcset="https://blog.8688886.xyz/p/image-gallery/2_hu_42f6436cb1637265.jpg 480w, https://blog.8688886.xyz/p/image-gallery/2_hu_27862a49608da0d9.jpg 1024w"
loading="lazy"
alt="Image 2"
class="gallery-image"
data-flex-grow="66"
data-flex-basis="160px"
>&lt;/p>
&lt;blockquote>
&lt;p>Photo by &lt;a class="link" href="https://unsplash.com/@mymind" target="_blank" rel="noopener"
>mymind&lt;/a> and &lt;a class="link" href="https://unsplash.com/@lukechesser" target="_blank" rel="noopener"
>Luke Chesser&lt;/a> on &lt;a class="link" href="https://unsplash.com/" target="_blank" rel="noopener"
>Unsplash&lt;/a>&lt;/p>&lt;/blockquote></description></item><item><title>Shortcodes</title><link>https://blog.8688886.xyz/p/shortcodes/</link><pubDate>Fri, 25 Aug 2023 00:00:00 +0000</pubDate><author>86@example.com (八 六)</author><guid>https://blog.8688886.xyz/p/shortcodes/</guid><description>&lt;img src="https://blog.8688886.xyz/p/shortcodes/cover.jpg" alt="Featured image of post Shortcodes" />&lt;p>For more details, check out the &lt;a class="link" href="https://stack.jimmycai.com/writing/shortcodes" target="_blank" rel="noopener"
>documentation&lt;/a>.&lt;/p>
&lt;h2 id="bilibili-video">Bilibili video
&lt;/h2>
&lt;div class="video-wrapper">
&lt;iframe src="https://player.bilibili.com/player.html?as_wide=1&amp;amp;high_quality=1&amp;amp;page=1&amp;bvid=BV1d4411N7zD"
scrolling="no"
frameborder="no"
framespacing="0"
allowfullscreen="true"
>
&lt;/iframe>
&lt;/div>
&lt;h2 id="tencent-video">Tencent video
&lt;/h2>
&lt;div class="video-wrapper">
&lt;iframe src="https://v.qq.com/txp/iframe/player.html?vid=g0014r3khdw&amp;auto=0"
scrolling="no"
frameborder="no"
framespacing="0"
allowfullscreen="true"
>
&lt;/iframe>
&lt;/div>
&lt;h2 id="youtube-video">YouTube video
&lt;/h2>&lt;div class="video-wrapper">
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/0qwALOOvUik"
allowfullscreen
title="YouTube Video"
>
&lt;/iframe>
&lt;/div>
&lt;h2 id="generic-video-file">Generic video file
&lt;/h2>&lt;div class="video-wrapper">
&lt;video
controls
src="https://www.w3schools.com/tags/movie.mp4"
>
&lt;p>
Your browser doesn't support HTML5 video. Here is a
&lt;a href="https://www.w3schools.com/tags/movie.mp4">link to the video&lt;/a> instead.
&lt;/p>
&lt;/video>
&lt;/div>
&lt;h2 id="gist">Gist
&lt;/h2>&lt;script src="https://gist.github.com/CaiJimmy/e2751a943de10b2a5b3a8a6c2120cb86.js">&lt;/script>
&lt;h2 id="gitlab">GitLab
&lt;/h2>&lt;script
type="application/javascript"
src="https://gitlab.com/-/snippets/2589724.js"
>&lt;/script>
&lt;h2 id="quote">Quote
&lt;/h2>&lt;blockquote>
&lt;p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.&lt;/p>&lt;span class="cite">&lt;span>― &lt;/span>&lt;span>A famous person, &lt;/span>&lt;a href="https://en.wikipedia.org/wiki/Book">&lt;cite>The book they wrote&lt;/cite>&lt;/a>&lt;/span>&lt;/blockquote>
&lt;hr>
&lt;blockquote>
&lt;p>Photo by &lt;a class="link" href="https://unsplash.com/@codioful" target="_blank" rel="noopener"
>Codioful&lt;/a> on &lt;a class="link" href="https://unsplash.com/photos/WDSN62Qdxuk" target="_blank" rel="noopener"
>Unsplash&lt;/a>&lt;/p>&lt;/blockquote></description></item><item><title>Math Typesetting</title><link>https://blog.8688886.xyz/p/math-typesetting/</link><pubDate>Thu, 24 Aug 2023 00:00:00 +0000</pubDate><author>86@example.com (八 六)</author><guid>https://blog.8688886.xyz/p/math-typesetting/</guid><description>&lt;p>Stack has built-in support for math typesetting using &lt;a class="link" href="https://katex.org/" target="_blank" rel="noopener"
>KaTeX&lt;/a>.&lt;/p>
&lt;p>&lt;strong>It&amp;rsquo;s not enabled by default side-wide,&lt;/strong> but you can enable it for individual posts by adding &lt;code>math: true&lt;/code> to the front matter. Or you can enable it side-wide by adding &lt;code>math = true&lt;/code> to the &lt;code>params.article&lt;/code> section in &lt;code>config.toml&lt;/code>.&lt;/p>
&lt;h2 id="inline-math">Inline math
&lt;/h2>&lt;p>This is an inline mathematical expression: $\varphi = \dfrac{1+\sqrt5}{2}= 1.6180339887…$&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-markdown" data-lang="markdown">&lt;span class="line">&lt;span class="cl">$\varphi = \dfrac{1+\sqrt5}{2}= 1.6180339887…$
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="block-math">Block math
&lt;/h2>$$
\varphi = 1+\frac{1} {1+\frac{1} {1+\frac{1} {1+\cdots} } }
$$&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-markdown" data-lang="markdown">&lt;span class="line">&lt;span class="cl">$$
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> \varphi = 1+\frac{1} {1+\frac{1} {1+\frac{1} {1+\cdots} } }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$$
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>$$
f(x) = \int_{-\infty}^\infty\hat f(\xi)\,e^{2 \pi i \xi x}\,d\xi
$$&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-markdown" data-lang="markdown">&lt;span class="line">&lt;span class="cl">$$
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> f(x) = \int_{-\infty}^\infty\hat f(\xi)\,e^{2 \pi i \xi x}\,d\xi
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$$
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>Hello World</title><link>https://blog.8688886.xyz/p/hello-world/</link><pubDate>Sun, 06 Mar 2022 00:00:00 +0000</pubDate><author>86@example.com (八 六)</author><guid>https://blog.8688886.xyz/p/hello-world/</guid><description>&lt;img src="https://blog.8688886.xyz/p/hello-world/cover.jpg" alt="Featured image of post Hello World" />&lt;p>Welcome to Hugo theme Stack. This is your first post. Edit or delete it, then start writing!&lt;/p>
&lt;p>For more information about this theme, check the documentation: &lt;a class="link" href="https://stack.jimmycai.com/" target="_blank" rel="noopener"
>https://stack.jimmycai.com/&lt;/a>&lt;/p>
&lt;p>Want a site like this? Check out &lt;a class="link" href="https://github.com/CaiJimmy/hugo-theme-stack-starter" target="_blank" rel="noopener"
>hugo-theme-stack-stater&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>Photo by &lt;a class="link" href="https://unsplash.com/@pawel_czerwinski" target="_blank" rel="noopener"
>Pawel Czerwinski&lt;/a> on &lt;a class="link" href="https://unsplash.com/" target="_blank" rel="noopener"
>Unsplash&lt;/a>&lt;/p>&lt;/blockquote></description></item></channel></rss>